package application;
import static com.kuka.roboticsAPI.motionModel.BasicMotions.lin;
import static com.kuka.roboticsAPI.motionModel.BasicMotions.linRel;

import static com.kuka.roboticsAPI.motionModel.BasicMotions.ptp;

import com.kuka.common.ThreadUtil;
import com.kuka.generated.ioAccess.SortieIOGroup;
import com.kuka.roboticsAPI.applicationModel.RoboticsAPIApplication;
import com.kuka.roboticsAPI.conditionModel.ForceCondition;
import com.kuka.roboticsAPI.deviceModel.LBR;
import com.kuka.roboticsAPI.geometricModel.CartDOF;
import com.kuka.roboticsAPI.geometricModel.Frame;
import com.kuka.roboticsAPI.geometricModel.ObjectFrame;
import com.kuka.roboticsAPI.geometricModel.Tool;
import com.kuka.roboticsAPI.geometricModel.math.Transformation;
import com.kuka.roboticsAPI.motionModel.BasicMotions;

import com.kuka.roboticsAPI.motionModel.*;
import com.kuka.roboticsAPI.motionModel.controlModeModel.CartesianImpedanceControlMode;
import com.kuka.roboticsAPI.uiModel.ApplicationDialogType;
import com.kuka.roboticsAPI.deviceModel.*;


import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;

import javax.inject.Inject;

public class robot_move extends RoboticsAPIApplication {
	
	@Inject
    private LBR lBR_iiwa_14_R820_1;
    private Tool TCP2;
    private ForceCondition contactForceReached;
    private CartesianImpedanceControlMode compliant;
    @Inject
    private SortieIOGroup Sortie;
    
    
    private static final String PYTHON_SERVER_IP = "172.31.1.140";  
    private static final int PYTHON_SERVER_PORT = 30008;   
    
    
    @Override
    public void initialize() {
    
    	TCP2 = getApplicationData().createFromTemplate("Ventouse");
    	TCP2.attachTo(lBR_iiwa_14_R820_1.getFlange());
	    contactForceReached = ForceCondition.createSpatialForceCondition(lBR_iiwa_14_R820_1.getFlange(), 23.0);
		
		compliant = new CartesianImpedanceControlMode();
		compliant.parametrize(CartDOF.Z).setStiffness(50);
		if (Sortie == null) {
		    getLogger().error("SortieIOGroup");
		}
		
    }
  
    
    @Override
    public void run() {
    	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.2));
    	
        try {
        	int port = 30008;
        	System.out.println("Client connected?");
            ServerSocket serverSocket = new ServerSocket(port);
            Socket clientSocket = serverSocket.accept();
            System.out.println("Client connected!");
        
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            String inputLine;
            
            double count = 0.0;
            double quantity = 0.0;
            
            
            double[] x = new double[10];
            double[] y = new double[10];
            double[] z = new double[10];
            double[] color = new double[10];
            double[] forme = new double[10];
            double[] angle = new double[10];
            
            int count_yellow = 1;
            int count_blue = 1;
            int count_red = 1;
            int count_cir = 1;
            
            
            String[]options={"Yellow cube","Blue cube","Red cube","Blue cylinder"};
            int[]order=new int[4];
            
            
            for (int i =0;i< options.length;i++){
            	int choice = getApplicationUI().displayModalDialog(ApplicationDialogType.QUESTION, "Select order #" + (i + 1), options);
            	
            	System.out.println(choice);
            	System.out.println(options[choice]);
            	if (options[choice] == "Yellow cube"){order[i] = 1; }
            	if (options[choice] == "Blue cube"){order[i] = 2;}
            	if (options[choice] == "Red cube"){order[i] = 3;}
            	if (options[choice] == "Blue cylinder"){order[i] = 4;}
            	
           }
            
            System.out.println(order[0]);
            System.out.println(order[1]);
            System.out.println(order[2]);
            System.out.println(order[3]);
            
            
            
            while ((inputLine = in.readLine()) != null && count == 0.0){

            	
            	quantity = Double.parseDouble(inputLine);
            	System.out.println("step1");
            	count = 1.0;
            }
            
            int pointIndex = 1; 
            
            
            
            	 
            	 
            	 
            	 
            while ((inputLine = in.readLine()) != null && pointIndex <= quantity && count <= quantity ) {
            	
            	count = count + 1.0;
                String[] data = inputLine.split(",");

                
                if (pointIndex <= 10) { 
                    x[pointIndex - 1] = Double.parseDouble(data[0].trim());
                    y[pointIndex - 1] = Double.parseDouble(data[1].trim());
                    z[pointIndex - 1] = Double.parseDouble(data[2].trim());
                    color[pointIndex - 1] = Double.parseDouble(data[3].trim());
                    forme[pointIndex - 1] = Double.parseDouble(data[4].trim());
                    angle[pointIndex - 1] = Double.parseDouble(data[5].trim());                
                }
                pointIndex++;
            }
            
           
            
            
                
            System.out.println("step3");
            System.out.println("quantity = " + quantity);
         
            
            for (int i = 0; i < pointIndex - 1; i++) {
                System.out.println("Point " + (i + 1) + ": " + x[i] + ", " + y[i] + ", " + z[i] + ", " 
                    + color[i] + ", " + forme[i] + ", " + angle[i]);  
                
      
                if (x[i] < 0){x[i] = x[i] * 1.62;}
                

                else if (x[i] >= 0){x[i] = x[i]* 1.52;}
                x[i] += 0.018 * 1000;           
                y[i] = y[i] *1.18;
                y[i] -= 0.229 * 1000;
                z[i] -= 0.32 * 1000;
                x[i] = -x[i];
                z[i] = -z[i];
                System.out.println("Point " + (i + 1) + ": " + x[i] + ", " + y[i] + ", " + z[i] + ", " 
                        + color[i] + ", " + forme[i] + ", " + angle[i]);  
            }
            
    
      
           
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 2 && forme[i] == 5 && order[0] ==1){           	
            	ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
             	    
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));	
            	
             	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	
            	           	
             	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T13")).setJointVelocityRel(0.2));
            	
            	if (count_yellow == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/yellow3")).setJointVelocityRel(0.2));
            	count_yellow += 1;
            	}
            	else if (count_yellow == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow2")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                	}
            	else if (count_yellow == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow1")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.2));
            	}
            }
            
                    
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 5 && order[0] ==2){
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
      
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/T11")).setJointVelocityRel(0.2));
            	
            	if (count_blue == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/Blue3")).setJointVelocityRel(0.2));
            	count_blue += 1;
            	}
            	else if (count_blue == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue2")).setJointVelocityRel(0.2));
                	count_blue += 1;
                	}
            	else if (count_blue == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue1")).setJointVelocityRel(0.2));
                	count_blue += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	}
            }
           
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 3 && forme[i] == 5 && order[0] ==3){
            		
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
   
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T12")).setJointVelocityRel(0.2));
            	if (count_red == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/Red3")).setJointVelocityRel(0.2));
                	count_red += 1;
                	}
                	else if (count_red == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red2")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    	}
                	else if (count_red == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red1")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	
            	}
            }
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 4 && order[0] ==4){
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/aux_cylind")).setJointVelocityRel(0.2));
            	if (count_cir == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/cylind1")).setJointVelocityRel(0.2));
                	count_cir += 1;
                	}
                	else if (count_cir == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind2")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    	}
                	else if (count_cir == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind3")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));

            	}
            }
            
            
            
            
            
            
            
            
            
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 2 && forme[i] == 5 && order[1] ==1){           	
            	ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
  
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));	
            	
             	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	
            	           	
             	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T13")).setJointVelocityRel(0.2));
            	
            	if (count_yellow == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/yellow3")).setJointVelocityRel(0.2));
            	count_yellow += 1;
            	}
            	else if (count_yellow == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow2")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                	}
            	else if (count_yellow == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow1")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.2));
            	}
            }
            
                    
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 5 && order[1] ==2){
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
      
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/T11")).setJointVelocityRel(0.2));
            	
            	if (count_blue == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/Blue3")).setJointVelocityRel(0.2));
            	count_blue += 1;
            	}
            	else if (count_blue == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue2")).setJointVelocityRel(0.2));
                	count_blue += 1;
                	}
            	else if (count_blue == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue1")).setJointVelocityRel(0.2));
                	count_blue += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	}
            }
           
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 3 && forme[i] == 5 && order[1] ==3){
            		
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
    
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T12")).setJointVelocityRel(0.2));
            	if (count_red == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/Red3")).setJointVelocityRel(0.2));
                	count_red += 1;
                	}
                	else if (count_red == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red2")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    	}
                	else if (count_red == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red1")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	
            	}
            }
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 4 && order[1] ==4){
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/aux_cylind")).setJointVelocityRel(0.2));
            	if (count_cir == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/cylind1")).setJointVelocityRel(0.2));
                	count_cir += 1;
                	}
                	else if (count_cir == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind2")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    	}
                	else if (count_cir == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind3")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));

            	}
            }
            
            
            
            
            
            
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 2 && forme[i] == 5 && order[2] ==1){           	
            	ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
  
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));	
            	
             	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	
            	           	
             	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T13")).setJointVelocityRel(0.2));
            	
            	if (count_yellow == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/yellow3")).setJointVelocityRel(0.2));
            	count_yellow += 1;
            	}
            	else if (count_yellow == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow2")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                	}
            	else if (count_yellow == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow1")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.2));
            	}
            }
            
                    
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 5 && order[2] ==2){
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
     
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/T11")).setJointVelocityRel(0.2));
            	
            	if (count_blue == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/Blue3")).setJointVelocityRel(0.2));
            	count_blue += 1;
            	}
            	else if (count_blue == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue2")).setJointVelocityRel(0.2));
                	count_blue += 1;
                	}
            	else if (count_blue == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue1")).setJointVelocityRel(0.2));
                	count_blue += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	}
            }
           
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 3 && forme[i] == 5 && order[2] ==3){
            		
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
                
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T12")).setJointVelocityRel(0.2));
            	if (count_red == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/Red3")).setJointVelocityRel(0.2));
                	count_red += 1;
                	}
                	else if (count_red == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red2")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    	}
                	else if (count_red == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red1")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	
            	}
            }
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 4 && order[2] ==4){
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/aux_cylind")).setJointVelocityRel(0.2));
            	if (count_cir == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/cylind1")).setJointVelocityRel(0.2));
                	count_cir += 1;
                	}
                	else if (count_cir == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind2")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    	}
                	else if (count_cir == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind3")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));

            	}
            }
            
            
            
            
            
            
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 2 && forme[i] == 5 && order[3] ==1){           	
            	ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
                
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));	
            	
             	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	
            	           	
             	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T13")).setJointVelocityRel(0.2));
            	
            	if (count_yellow == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/yellow3")).setJointVelocityRel(0.2));
            	count_yellow += 1;
            	}
            	else if (count_yellow == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow2")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                	}
            	else if (count_yellow == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/yellow1")).setJointVelocityRel(0.2));
                	count_yellow += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.2));
            	}
            }
            
                    
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 5 && order[3] ==2){
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
        
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/T11")).setJointVelocityRel(0.2));
            	
            	if (count_blue == 1){
            	TCP2.move(ptp(getApplicationData().getFrame("/Blue3")).setJointVelocityRel(0.2));
            	count_blue += 1;
            	}
            	else if (count_blue == 2){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue2")).setJointVelocityRel(0.2));
                	count_blue += 1;
                	}
            	else if (count_blue == 3){
                	TCP2.move(ptp(getApplicationData().getFrame("/Blue1")).setJointVelocityRel(0.2));
                	count_blue += 1;
                }
            	
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	}
            }
           
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 3 && forme[i] == 5 && order[3] ==3){
            		
        		ObjectFrame currentFrame = getApplicationData().getFrame("/Base_Test");
          
             	double rotationAngleRad = Math.toRadians(90 - angle[i]);        
             	Transformation rotationTransformation = Transformation.ofRad(215 + 4.21, 290 - 1.63, 500,3.1415926/2 + rotationAngleRad ,0  ,3.1415926  );           	
             	Frame rotatedFrame = currentFrame.copyWithRedundancy().transform(rotationTransformation);      
             	TCP2.move(lin(rotatedFrame).setJointVelocityRel(0.1));
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	
            	prise();
            	TCP2.move(ptp(getApplicationData().getFrame("/T12")).setJointVelocityRel(0.2));
            	if (count_red == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/Red3")).setJointVelocityRel(0.2));
                	count_red += 1;
                	}
                	else if (count_red == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red2")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    	}
                	else if (count_red == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/Red1")).setJointVelocityRel(0.2));
                    	count_red += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));
            	
            	}
            }
            
            for (int i = 0; i < pointIndex - 1; i++){
            	if (color[i] == 1 && forme[i] == 4 && order[3] ==4){
            	TCP2.move(linRel(x[i],y[i],z[i],getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));
            	prise();
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/aux_cylind")).setJointVelocityRel(0.2));
            	if (count_cir == 1){
                	TCP2.move(ptp(getApplicationData().getFrame("/cylind1")).setJointVelocityRel(0.2));
                	count_cir += 1;
                	}
                	else if (count_cir == 2){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind2")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    	}
                	else if (count_cir == 3){
                    	TCP2.move(ptp(getApplicationData().getFrame("/cylind3")).setJointVelocityRel(0.2));
                    	count_cir += 1;
                    }
            	ThreadUtil.milliSleep(500);
           	    Sortie.setSortie1(false);
            	
            	
            	TCP2.move(ptp(getApplicationData().getFrame("/testing")).setJointVelocityRel(0.1));

            	}
            }
           
            sendPoseToPythonServer();
            serverSocket.close();
            clientSocket.close();
            //}
            
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        
    }
    
    
    public void sendPoseToPythonServer() {
        Socket socket = null;
        PrintWriter writer = null;
        try {
            // Creation de la connexion avec le serveur
            socket = new Socket(PYTHON_SERVER_IP, PYTHON_SERVER_PORT);
            OutputStream output = socket.getOutputStream();
            writer = new PrintWriter(output, true);

            // Conversion du tableau pose en chaîne séparée par des virgules
            String poseStr = String.format("new?");
                    

            // Envoi de la chaîne de caractères au serveur Python
            writer.println(poseStr);
            //System.out.println("Sent pose: " + poseStr);

        } catch (Exception e) {
            System.err.println("Error sending pose to Python server: " + e.getMessage());
        } finally {
            // Fermeture des ressources
            if (writer != null) {
                writer.close();
            }
            if (socket != null) {
                try {
                    socket.close();
                } catch (Exception e) {
                    System.err.println("Error closing socket: " + e.getMessage());
                }
            }
        }
    }
    
    private void prise(){
      TCP2.move(linRel(0,0,-200,getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.05).breakWhen(contactForceReached));
 	  Sortie.setSortie1(true);
 	  TCP2.move(linRel(0,0,150,getApplicationData().getFrame("/Base_Test")).setJointVelocityRel(0.2));

	}
    
    
    
 
}